print("Something went wrong")
}
}
return(batch)
}
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
ids<-names(single_cell)
batch<-make_batch(single_cell)
anno<-new("AnnotatedDataFrame", as.data.frame(cbind(batch,ids)))
rownames(anno)<-anno$ids
teich_scater <- scater::newSCESet(
countData = single_cell,
phenoData = anno
)
teich_scater_QC <- scater::calculateQCMetrics(
teich_scater,
feature_controls = list(MT = mt_isoforms)
)
mt_reads<-scater::plotPhenoData(
teich_scater_QC,
aes_string(x = "total_features",
y = "pct_counts_feature_controls_MT",
colour = "batch")
)
teich_scater_QC<-teich_scater_QC[,teich_scater_QC$pct_counts_feature_controls_MT<10]
#Read in QC statistics files
QC_raw<-read.csv("data/Teichmann_results-master/raw/read_alignment_qc.csv")
correct_cells<-read.table("data/Teichmann_results-master/correct_cells_no_bulk.txt")
QC_raw<-QC_raw[QC_raw$Filename %in% correct_cells$V1,]
#Alignment based QC plots
Unique<-ggplot(data=QC_raw, aes(x=reorder(Filename,Unique), y=Unique/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() +xlab(" ") + ggtitle("\nNumber of Uniquely Mapping Reads")
NonUnique<-ggplot(data=QC_raw, aes(x=reorder(Filename,NonUnique), y=NonUnique/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + xlab(" ") + ggtitle("Number of Non-Uniquely Mapping Reads")
Unmapped<-ggplot(data=QC_raw, aes(x=reorder(Filename,Unmapped), y=Unmapped)) + geom_point(stat="identity") + ylab("Number of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + ylim(0,100) + xlab(" ") + ggtitle("Number of Unmapped Reads")
NumAlign<-ggplot(data=QC_raw, aes(x=reorder(Filename,NumAlignments), y=NumAlignments/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + scale_x_discrete() + xlab(" ") + ggtitle("\nNumber of Alignments")
#Read number based QC plot
NumReads<-ggplot(data=QC_raw, aes(x=reorder(Filename,NumReads), y=NumReads/1000000)) + geom_point(stat="identity") + ylab("Millions of Reads") + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.title.x=element_text(size=14)) + scale_x_discrete() + xlab(" ") + ggtitle("\nNumber of Reads")
#ggarrange(mt_reads, NumReads, NumAlign, Unique, NonUnique, Unmapped, ncol = 2,nrow=3, labels = c("A","B","C","D","E","F"))
#ggsave("Pictures/Benchmarking_paper_Figures/Supplementary_Figures/Supplementary_2_Teichmann_raw.pdf", plot=last_plot(),height = (6.04*1.5), width=(8.57*1.5))
#Filters applied based on plots
filter_ES<-QC_raw[QC_raw$NonUnique<2500000 & QC_raw$NumReads<12000000 & QC_raw$NumReads>3500000 & QC_raw$NumAlignments>4000000 & QC_raw$NumAlignments< 32000000 & QC_raw$Unique<40000000,]
filter_ES<-filter_ES[filter_ES$Filename %in% teich_scater_QC$ids,]
rm(list=setdiff(ls(), c("filter_RSEM", "filter_ES")))
#####################################################################
# BULK DATA PROCESSING
two_iso<-read.table("data/quant_results/gene_isoform_relationship.txt")
get_two_iso<-function(path){
#read in data
df<-read.table(path,header=T)
#keep only transcripts with 2 iso
df<-df[df$target_id %in% two_iso$V2,]
#Get a list of unique genes
unique_genes<-unique(two_iso$V1)
#return(unique_genes)
genes_to_keep<-list()
j<-1
for (i in 1:length(unique_genes)){
#For each gene, find corresponding isoforms
goi<-two_iso[two_iso$V1==unique_genes[i],]
#find expression level of both isoforms
expression_of_isoform_1<-df[df$target_id==as.character(goi$V2[1]),]$est_counts
expression_of_isoform_2<-df[df$target_id==as.character(goi$V2[2]),]$est_counts
#If both isoforms are expressed, add gene to genes_to_keep
if (expression_of_isoform_1>2 & expression_of_isoform_2>2){
genes_to_keep[j]<-as.character(unique_genes[i])
j<-j+1
}
}
#keep only genes in genes_to_keep in two_iso
updated_two_iso<-two_iso[two_iso$V1 %in% genes_to_keep,]
#keep only isoforms in updated_two_iso in df
df<-df[df$target_id %in% updated_two_iso$V2,]
#add gene name column to df
#df<-df[order(df$target_id),]
#updated_two_iso<-updated_two_iso[order(updated_two_iso$V2)]
colnames(updated_two_iso)<-c("gene_name", "target_id")
df<-merge(df,updated_two_iso)
return(df)
}
bulk_B_1<-get_two_iso("data/quant_results/B_B_M_1_B1-Aligned.sortedByCoord.out.ex.bam/abundance.tsv")
bulk_B_2<-get_two_iso("data/quant_results/B_B_M_1_B2-Aligned.sortedByCoord.out.ex.bam/abundance.tsv")
bulk_B_3<-get_two_iso("data/quant_results/B_B_M_1_B3-Aligned.sortedByCoord.out.ex.bam/abundance.tsv")
bulk_ES<-get_two_iso("data/quant_results/ERR522956/abundance.tsv")
#For now I won't apply any filters on the simulated data
###############################################################################
# Single cell processing
#Function which loads data, subsets it and orders it
data_processing<-function(path, filter,bulk){
results<-read.table(path)
results<-results[,colnames(results) %in% filter$Filename]
colnames(results)<-sub("sample_", "Cell", colnames(results))
colnames(results)<-sub("sample", "Cell", colnames(results))
colnames(results)<-sub("bias_","", colnames(results))
results<-results[ , order(colnames(results))]
results<-results[order(rownames(results)),]
return(results)
}
#Function which returns dataframe of how many isoforms are expressed
how_many_iso<-function(path_to_single_cell, filter,bulk) {
#Read in single cell rna seq data
single_cell<-data_processing(path_to_single_cell, filter)
#Only keep isoforms in bulk
single_cell<-single_cell[rownames(single_cell) %in% bulk$target_id,]
genes<-unique(bulk$gene_name)
no_expressed_iso<-data.frame(genes)
#For each cell
for (i in 1:ncol(single_cell)){
cell_no_expressed_iso<-vector()
#For each gene
for (j in 1:length(genes)){
isoform_1<-bulk[bulk$gene_name==as.character(genes[j]),]$target_id[1]
isoform_1<-sum(single_cell[as.character(isoform_1), i]>2)
isoform_2<-bulk[bulk$gene_name==as.character(genes[j]),]$target_id[2]
isoform_2<-sum(single_cell[as.character(isoform_2), i]>2)
cell_no_expressed_iso[j]<-isoform_1 + isoform_2
}
#Record number of expressed isoforms in dataframe
no_expressed_iso<-cbind(no_expressed_iso, cell_no_expressed_iso)
colnames(no_expressed_iso)[i+1]<-colnames(single_cell)[i]
#return(names(single_cell[,i,drop=FALSE]))
}
#Return dataframe
return(melt(no_expressed_iso))
}
B_1_num_iso<-how_many_iso("data/splatter_simulation_files_2/Kallisto_results_real_data_clean_counts.txt", filter_RSEM, bulk_B_1)
B_2_num_iso<-how_many_iso("data/splatter_simulation_files_2/Kallisto_results_real_data_clean_counts.txt", filter_RSEM, bulk_B_2)
B_3_num_iso<-how_many_iso("data/splatter_simulation_files_2/Kallisto_results_real_data_clean_counts.txt", filter_RSEM, bulk_B_3)
ES_num_iso<-how_many_iso("Dropbox/Teichmann/clean_Kallisto_real_Counts.txt", filter_ES, bulk_ES)
B_0_1_2_barplot<-ggplot(data=B_1_num_iso, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("B lymphocytes")
B_2_0_1_2_barplot<-ggplot(data=B_2_num_iso, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed")
B_3_0_1_2_barplot<-ggplot(data=B_2_num_iso, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed")
ES_0_1_2_barplot<-ggplot(data=ES_num_iso, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("ES cells")
percentage<-function(numbers){
return((sum(numbers)/length(numbers)) * 100)
}
get_percentage_hist<-function(df){
no_zeros<-df#[df$value!=0,]
no_zeros$value<-no_zeros$value==2
two_iso_percentage<-no_zeros %>% group_by(genes) %>% summarise(percentage(value))
ggplot(data = two_iso_percentage, aes(x=`percentage(value)`)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
}
B_1_percent_hist<-get_percentage_hist(B_1_num_iso)
B_2_percent_hist<-get_percentage_hist(B_2_num_iso)
B_3_percent_hist<-get_percentage_hist(B_3_num_iso)
ES_percent_hist<-get_percentage_hist(ES_num_iso)
percentage_vs_expression<-function(df,path,filter,bulk){
#get percentage of genes expressing 2 isoforms
no_zeros<-df #[df$value!=0,]
no_zeros$value<-no_zeros$value==2
two_iso_percentage<-no_zeros %>% group_by(genes) %>% summarise(percentage(value))
#get expression of each gene
single_cell<-data_processing(path,filter)
#Only keep isoforms in bulk
single_cell<-single_cell[rownames(single_cell) %in% bulk$target_id,]
new_bulk<-data.frame(bulk$target_id, bulk$gene_name)
new_bulk<-plyr::rename(new_bulk, c("bulk.target_id"= "rn", "bulk.gene_name"="genes"))
setDT(single_cell, keep.rownames = TRUE)[]
single_cell<-as.data.frame(single_cell)
single_cell<-merge(single_cell, new_bulk)
single_cell<-melt(single_cell)
expression<-single_cell %>% group_by(genes) %>% summarise(sum(log2(value+1)))
exprs_percent<-merge(expression,two_iso_percentage)
#return(exprs_percent)
ggplot(data = exprs_percent, aes(y=`sum(log2(value + 1))`,x=`percentage(value)`)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
}
B_1_percent_exprs_plot<-percentage_vs_expression(B_1_num_iso, "data/splatter_simulation_files_2/Kallisto_results_real_data_clean_counts.txt", filter_RSEM, bulk_B_1)
B_2_percent_exprs_plot<-percentage_vs_expression(B_2_num_iso, "data/splatter_simulation_files_2/Kallisto_results_real_data_clean_counts.txt", filter_RSEM, bulk_B_2)
B_3_percent_exprs_plot<-percentage_vs_expression(B_3_num_iso, "data/splatter_simulation_files_2/Kallisto_results_real_data_clean_counts.txt", filter_RSEM, bulk_B_3)
ES_percent_exprs_plot<-percentage_vs_expression(ES_num_iso, "Dropbox/Teichmann/clean_Kallisto_real_Counts.txt", filter_ES, bulk_ES)
ggarrange(B_0_1_2_barplot, ES_0_1_2_barplot, B_1_percent_hist, ES_percent_hist, B_1_percent_exprs_plot, ES_percent_exprs_plot, ncol =2, nrow=3, labels=c("A", "", "B", "", "C"))
ggsave("Pictures/Benchmarking_paper_Figures/Figure5.pdf", plot=last_plot(), height= 225, width=170, units=c("mm"))
setwd("Benchmarking_paper/processed_files/")
?saveRDS
readRDS("data/SupplementaryFigure5_lunsim.RDS")
rm(list=ls())
library('splatter')
library('scran')
library('scDD')
library('pscl')
lunsim<-readRDS("data/SupplementaryFigure5_lunsim.RDS")
load("data/SupplementaryFigure5_lun2sim.Rdata")
load("data/SupplementaryFigure5_simplesim.Rdata")
load("data/SupplementaryFigure5_Kallisto.Rdata")
load("data/SupplementaryFigure5_RSEM.Rdata")
comparison<-compareSCESets(list(Simple=simplesim, Lun=lunsim, Lun2=lun2sim, RSEM=make_SCE(RSEM), real=make_SCE(Kallisto_real_data)))
ggarrange(comparison$Plots$Means, comparison$Plots$Variances, comparison$Plots$MeanVar, comparison$Plots$LibrarySizes, comparison$Plots$ZerosGene, comparison$Plots$ZerosCell, comparison$Plots$MeanZeros, ncol=2, nrow=4)
ggsave("pdfs/SupplementaryFigure5.png", last_plot(), width = 8.64 * 1.5, height = 6.03 * 1.5)
comparison<-compareSCESets(list(Simple=simplesim, Lun=lunsim, Lun2=lun2sim, RSEM=RSEM, real=Kallisto_real_data))
comparison<-compareSCESets(list(Simple=simplesim, Lun=lunsim, Lun2=lun2sim, RSEM=RSEM, real=Kallisto))
ggarrange(comparison$Plots$Means, comparison$Plots$Variances, comparison$Plots$MeanVar, comparison$Plots$LibrarySizes, comparison$Plots$ZerosGene, comparison$Plots$ZerosCell, comparison$Plots$MeanZeros, ncol=2, nrow=4)
library('ggpubr')
library(ggplot2)
ggarrange(comparison$Plots$Means, comparison$Plots$Variances, comparison$Plots$MeanVar, comparison$Plots$LibrarySizes, comparison$Plots$ZerosGene, comparison$Plots$ZerosCell, comparison$Plots$MeanZeros, ncol=2, nrow=4)
ggsave("pdfs/SupplementaryFigure5.png", last_plot(), width = 8.64 * 1.5, height = 6.03 * 1.5)
setwd(~)
setwd("~")
rm(list=ls())
library(ggplot2)
library(ggpubr)
library(reshape2)
library(hydroGOF)
library(scater)
library(data.table)
library(tidyverse)
###############################################################################
# QC FUNCTIONS
MT_reads<-function(counts_data, plates_data){
#ERCC and MT filtering
MaleB<-read.table(counts_data, header=T,row.names = 1)
if (plates_data==TRUE){
#Load plate data
plate1<-read.table("data/splatter_simulation_files_2/plate1.txt", row.names=1)
plate2<-read.table("data/splatter_simulation_files_2/plate2.txt", row.names = 1)
#Function that formats plate data
make_plates<-function(counts_data){
plates<-colnames(counts_data) %in% rownames(plate1)
for (i in 1:length(plates)){
if (plates[i]==TRUE){
plates[i]<-'batch1'
}
else{
plates[i]<-'batch2'
}
}
return(plates)
}
batch<-make_plates(MaleB)
}
else{
batch<-rep("Batch1", 96)
}
ids<-colnames(MaleB)
anno<-new("AnnotatedDataFrame", as.data.frame(cbind(batch,ids)))
rownames(anno)<-anno$ids
BLUEPRINT_Bs_scater <- scater::newSCESet(
countData = MaleB,
phenoData = anno
)
keep_feature <- rowSums(counts(BLUEPRINT_Bs_scater) > 0) > 0
BLUEPRINT_Bs_scater <- BLUEPRINT_Bs_scater[keep_feature, ]
ercc <- featureNames(BLUEPRINT_Bs_scater)[grepl("ERCC-", featureNames(BLUEPRINT_Bs_scater))]
mt_isoforms<-c("ENSMUST00000082387", "ENSMUST00000082388", "ENSMUST00000082389", "ENSMUST00000082390", "ENSMUST00000082391", "ENSMUST00000082392", "ENSMUST00000082393", "ENSMUST00000082394", "ENSMUST00000082395", "ENSMUST00000082396", "ENSMUST00000082397", "ENSMUST00000082398", "ENSMUST00000082399", "ENSMUST00000082400", "ENSMUST00000082401", "ENSMUST00000082402", "ENSMUST00000082403", "ENSMUST00000082404", "ENSMUST00000082405", "ENSMUST00000082406", "ENSMUST00000082407", "ENSMUST00000082408", "ENSMUST00000082409", "ENSMUST00000082410", "ENSMUST00000082411", "ENSMUST00000082412", "ENSMUST00000084013", "ENSMUST00000082414", "ENSMUST00000082415", "ENSMUST00000082416", "ENSMUST00000082417", "ENSMUST00000082418", "ENSMUST00000082419", "ENSMUST00000082420", "ENSMUST00000082421", "ENSMUST00000082422", "ENSMUST00000082423")
BLUEPRINT_Bs_scater_QC <- scater::calculateQCMetrics(
BLUEPRINT_Bs_scater,
feature_controls = list(ERCC = ercc, MT = mt_isoforms)
)
BLUEPRINT_Bs_scater_QC<-BLUEPRINT_Bs_scater_QC[,BLUEPRINT_Bs_scater_QC$pct_counts_feature_controls_MT<10]
return(BLUEPRINT_Bs_scater_QC)
}
###############################################################################
# CREATE FILTERS BASED ON QC STATS
#QC script
#Read in QC statistics files
QC_raw_1<-read.csv("data/BLUEPRINT_results_benchmark_2/RSEM/QC_stats/raw/read_alignment_qc_1.csv")
QC_raw_2<-read.csv("data/BLUEPRINT_results_benchmark_2/RSEM/QC_stats/raw/read_alignment_qc.csv")
QC_raw_3<-read.csv("data/BLUEPRINT_results_benchmark_2/RSEM/QC_stats/raw/read_alignment_qc_2.csv")
#Remove rows with NAs
QC_raw_1<-QC_raw_1[complete.cases(QC_raw_1),]
QC_raw_2<-QC_raw_2[complete.cases(QC_raw_2),]
QC_raw_3<-QC_raw_3[complete.cases(QC_raw_3),]
#Combine into one dataframe
QC_raw<-rbind(QC_raw_1,QC_raw_2,QC_raw_3)
QC_raw<-as.data.frame(QC_raw)
#Extract Bs
QC_raw<-QC_raw[grep('B', QC_raw$Filename),]
BLUEPRINT_QC_raw<-MT_reads("data/splatter_simulation_files_2/Kallisto_results_real_data_clean_counts.txt", TRUE)
BLUEPRINT_QC_sim<-MT_reads("data/BLUEPRINT_results_benchmark_2/RSEM/counts/clean_ground_truth_counts.txt",FALSE)
#Read in QC statistics files
QC_Sim_1<-read.csv("data/BLUEPRINT_results_benchmark_2/polyester/QC_stats/simulated/read_alignment_qc_1.csv")
QC_Sim_2<-read.csv("data/BLUEPRINT_results_benchmark_2/polyester/QC_stats/simulated/read_alignment_qc.csv")
#Remove rows with NAs
QC_Sim_1<-QC_Sim_1[complete.cases(QC_Sim_1),]
QC_Sim_2<-QC_Sim_2[complete.cases(QC_Sim_2),]
#Combine into one dataframe
QC_Sim<-rbind(QC_Sim_1,QC_Sim_2)
QC_Sim<-as.data.frame(QC_Sim)
#Filters applied based on plots
filter_RSEM<-QC_raw[QC_raw$NonUnique<350000 & QC_raw$NumReads<4000000 & QC_raw$NumAlignments< 8200000 & QC_raw$Unique<8000000,]
filter_RSEM<-filter_RSEM[filter_RSEM$Filename %in% BLUEPRINT_QC_raw$ids,]
filter_RSEM<-filter_RSEM[filter_RSEM$Filename %in% BLUEPRINT_QC_sim$ids,]
filter_bias<-QC_Sim[grep('bias', QC_Sim$Filename),]
filter_unbias<-QC_Sim[grep('sample_', QC_Sim$Filename),]
#remove unneeded objects
rm(list=setdiff(ls(), c("filter_RSEM", "filter_bias", "filter_unbias")))
################################################################################
#LOAD DATA AND PROCESS IT
#Function which loads data, subsets it and orders it
data_processing<-function(path, filter,RSEM){
results<-read.table(path)
if (RSEM==TRUE){
results<-results[,colnames(results) %in% filter$Filename]
results<-results[ , order(colnames(results))]
results<-results[order(rownames(results)),]
return(results)
}
else{
#fix difference in cell names between filter and table
filter$Filename<-sub("sample_", "Cell", filter$Filename)
filter$Filename<-sub("sample", "Cell", filter$Filename)
filter$Filename<-sub("bias_","", filter$Filename)
results<-results[,colnames(results) %in% filter$Filename]
results<-results[ , order(colnames(results))]
results<-results[order(rownames(results)),]
return(results)
}
}
make_ggplot<-function(path,filter,RSEM, id){
#load data
ground_truth<-data_processing(path, filter,RSEM)
setDT(ground_truth, keep.rownames = TRUE)[]
cells<-colnames(ground_truth)
ground_truth_expr<-ground_truth %>% gather(cells[2:ncol(ground_truth)], key="cell", value="estimates")
ground_truth_expr$estimates<-100*log2(ground_truth_expr$estimates +1)
ground_truth_expr<-cbind(ground_truth_expr, ID=rep(id, nrow(ground_truth_expr)))
return(ground_truth_expr)
}
p1<-make_ggplot("data/BLUEPRINT_results_benchmark_2/RSEM/results_matrices/clean_ground_truth_TPM.txt", filter_RSEM,TRUE)
p2<-make_ggplot("data/BLUEPRINT_results_benchmark_2/polyester/results_matrices/clean_ground_truth_TPM.txt",filter_bias,FALSE)
p3<-make_ggplot("data/BLUEPRINT_results_benchmark_2/polyester/results_matrices/clean_ground_truth_TPM.txt", filter_unbias,FALSE)
p1<-make_ggplot("data/BLUEPRINT_results_benchmark_2/RSEM/results_matrices/clean_ground_truth_TPM.txt", filter_RSEM,TRUE, "RSEM")
p2<-make_ggplot("data/BLUEPRINT_results_benchmark_2/polyester/results_matrices/clean_ground_truth_TPM.txt",filter_bias,FALSE, "Polyester_bias")
p3<-make_ggplot("data/BLUEPRINT_results_benchmark_2/polyester/results_matrices/clean_ground_truth_TPM.txt", filter_unbias,FALSE, "Polyester_unbias")
head(p1)
results<-rbind(p1,p2,p3)
write.table("Benchmarking_paper/processed_files/data/SupplementaryFigure7.txt")
write.table(results,"Benchmarking_paper/processed_files/data/SupplementaryFigure7.txt")
write.table(results,gzfile("Benchmarking_paper/processed_files/data/SupplementaryFigure7.gz"))
rm(list=ls())
library(DESeq2)
library(countsimQC)
#Function which loads data, subsets it and orders it
data_processing<-function(path){
results<-read.table(path)
results<-results[ , order(colnames(results))]
results<-results[order(rownames(results)),]
return(results)
}
#Create DESeq object for RSEM simulations
RSEM_sim<-data_processing("data/BLUEPRINT_results_benchmark_2/RSEM/counts/clean_ground_truth_counts.txt")
rm(list=ls())
library(DESeq2)
library(countsimQC)
#Function which loads data, subsets it and orders it
data_processing<-function(path){
results<-read.table(path)
results<-results[ , order(colnames(results))]
results<-results[order(rownames(results)),]
return(results)
}
#Create DESeq object for RSEM simulations
RSEM_sim<-data_processing("data/BLUEPRINT_results_benchmark_2/RSEM/counts/clean_ground_truth_counts.txt")
rm(list=ls())
library(ggplot2)
library(ggpubr)
library(reshape2)
##############################
# FUNCTIONS
get_percentage_hist<-function(df){
no_zeros<-df#[df$value!=0,]
no_zeros$value<-no_zeros$value==2
two_iso_percentage<-no_zeros %>% group_by(genes) %>% summarise(percentage(value))
ggplot(data = two_iso_percentage, aes(x=`percentage(value)`)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
}
#####################################
# MAKE FIGURE 5A
barplot_data<-read.table("data/Figure5_number_of_isoforms.txt")
B_2_barplot_data<-barplot_data[barplot_data$ID=="B_2",]
B_3_barplot_data<-barplot_data[barplot_data$ID=="B_3",]
B_2_0_1_2_barplot<-ggplot(data=B_2_barplot_data, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("Replicate 2")
B_3_0_1_2_barplot<-ggplot(data=B_3_barplot_data, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("Replicate 3")
##############################################################
#MAKE FIGURE 5B
exprs_percent_data<-read.table("../data/Figure_5_percent_exprs.txt")
colnames(exprs_percent_data)[2]<-"expression"
colnames(exprs_percent_data)[3]<-"percentage"
B_exprs_percent_data<-exprs_percent_data[exprs_percent_data$ID=="B_1",]
ES_exprs_percent_data<-exprs_percent_data[exprs_percent_data$ID=="ES",]
B_2_percent_hist<-ggplot(data=B_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_3_percent_hist<-ggplot(data=ES_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
#################################################################
#MAKE FIGURE 5C
B_2_exprs_percent_plot<-ggplot(data =B_exprs_percent_data, aes(y=expression,x=percentage)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_3_exprs_percent_plot<-ggplot(data = ES_exprs_percent_data, aes(y=expression,x=percentage)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
ggarrange(B_2_0_1_2_barplot, ES_3_0_1_2_barplot, B_2_percent_hist, B_3_percent_hist, B_2_exprs_percent_plot, B_3_exprs_percent_plot, ncol =2, nrow=3, labels=c("A", "", "B", "", "C"))
ggsave("../pdfs/SupplementaryFigure16.pdf", plot=last_plot(), height= 225, width=170, units=c("mm"))
ggsave("../pngs/SupplementaryFigure16.png", plot=last_plot(), height= 225, width=170, units=c("mm"))
setwd("Benchmarking_paper/processed_files/scripts/")
library(ggplot2)
library(ggpubr)
library(reshape2)
##############################
# FUNCTIONS
get_percentage_hist<-function(df){
no_zeros<-df#[df$value!=0,]
no_zeros$value<-no_zeros$value==2
two_iso_percentage<-no_zeros %>% group_by(genes) %>% summarise(percentage(value))
ggplot(data = two_iso_percentage, aes(x=`percentage(value)`)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
}
#####################################
# MAKE FIGURE 5A
barplot_data<-read.table("data/Figure5_number_of_isoforms.txt")
B_2_barplot_data<-barplot_data[barplot_data$ID=="B_2",]
B_3_barplot_data<-barplot_data[barplot_data$ID=="B_3",]
B_2_0_1_2_barplot<-ggplot(data=B_2_barplot_data, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("Replicate 2")
B_3_0_1_2_barplot<-ggplot(data=B_3_barplot_data, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("Replicate 3")
##############################################################
#MAKE FIGURE 5B
exprs_percent_data<-read.table("../data/Figure_5_percent_exprs.txt")
colnames(exprs_percent_data)[2]<-"expression"
colnames(exprs_percent_data)[3]<-"percentage"
B_exprs_percent_data<-exprs_percent_data[exprs_percent_data$ID=="B_1",]
ES_exprs_percent_data<-exprs_percent_data[exprs_percent_data$ID=="ES",]
B_2_percent_hist<-ggplot(data=B_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_3_percent_hist<-ggplot(data=ES_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
#################################################################
#MAKE FIGURE 5C
B_2_exprs_percent_plot<-ggplot(data =B_exprs_percent_data, aes(y=expression,x=percentage)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_3_exprs_percent_plot<-ggplot(data = ES_exprs_percent_data, aes(y=expression,x=percentage)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
ggarrange(B_2_0_1_2_barplot, ES_3_0_1_2_barplot, B_2_percent_hist, B_3_percent_hist, B_2_exprs_percent_plot, B_3_exprs_percent_plot, ncol =2, nrow=3, labels=c("A", "", "B", "", "C"))
ggsave("../pdfs/SupplementaryFigure16.pdf", plot=last_plot(), height= 225, width=170, units=c("mm"))
ggsave("../pngs/SupplementaryFigure16.png", plot=last_plot(), height= 225, width=170, units=c("mm"))
library(ggplot2)
library(ggpubr)
library(reshape2)
##############################
# FUNCTIONS
get_percentage_hist<-function(df){
no_zeros<-df#[df$value!=0,]
no_zeros$value<-no_zeros$value==2
two_iso_percentage<-no_zeros %>% group_by(genes) %>% summarise(percentage(value))
ggplot(data = two_iso_percentage, aes(x=`percentage(value)`)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
}
#####################################
# MAKE FIGURE 5A
barplot_data<-read.table("../data/Figure5_number_of_isoforms.txt")
B_2_barplot_data<-barplot_data[barplot_data$ID=="B_2",]
B_3_barplot_data<-barplot_data[barplot_data$ID=="B_3",]
B_2_0_1_2_barplot<-ggplot(data=B_2_barplot_data, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("Replicate 2")
B_3_0_1_2_barplot<-ggplot(data=B_3_barplot_data, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("Replicate 3")
##############################################################
#MAKE FIGURE 5B
exprs_percent_data<-read.table("../data/Figure_5_percent_exprs.txt")
colnames(exprs_percent_data)[2]<-"expression"
colnames(exprs_percent_data)[3]<-"percentage"
B_exprs_percent_data<-exprs_percent_data[exprs_percent_data$ID=="B_1",]
ES_exprs_percent_data<-exprs_percent_data[exprs_percent_data$ID=="ES",]
B_2_percent_hist<-ggplot(data=B_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_3_percent_hist<-ggplot(data=ES_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
#################################################################
#MAKE FIGURE 5C
B_2_exprs_percent_plot<-ggplot(data =B_exprs_percent_data, aes(y=expression,x=percentage)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_3_exprs_percent_plot<-ggplot(data = ES_exprs_percent_data, aes(y=expression,x=percentage)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
ggarrange(B_2_0_1_2_barplot, ES_3_0_1_2_barplot, B_2_percent_hist, B_3_percent_hist, B_2_exprs_percent_plot, B_3_exprs_percent_plot, ncol =2, nrow=3, labels=c("A", "", "B", "", "C"))
ggsave("../pdfs/SupplementaryFigure16.pdf", plot=last_plot(), height= 225, width=170, units=c("mm"))
ggsave("../pngs/SupplementaryFigure16.png", plot=last_plot(), height= 225, width=170, units=c("mm"))
ggarrange(B_2_0_1_2_barplot, _3_0_1_2_barplot, B_2_percent_hist, B_3_percent_hist, B_2_exprs_percent_plot, B_3_exprs_percent_plot, ncol =2, nrow=3, labels=c("A", "", "B", "", "C"))
ggarrange(B_2_0_1_2_barplot, B_3_0_1_2_barplot, B_2_percent_hist, B_3_percent_hist, B_2_exprs_percent_plot, B_3_exprs_percent_plot, ncol =2, nrow=3, labels=c("A", "", "B", "", "C"))
rm(list=ls())
library(ggplot2)
library(ggpubr)
library(reshape2)
##############################
# FUNCTIONS
get_percentage_hist<-function(df){
no_zeros<-df#[df$value!=0,]
no_zeros$value<-no_zeros$value==2
two_iso_percentage<-no_zeros %>% group_by(genes) %>% summarise(percentage(value))
ggplot(data = two_iso_percentage, aes(x=`percentage(value)`)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
}
#####################################
# MAKE FIGURE 5A
barplot_data<-read.table("../data/Figure5_number_of_isoforms.txt")
B_2_barplot_data<-barplot_data[barplot_data$ID=="B_2",]
B_3_barplot_data<-barplot_data[barplot_data$ID=="B_3",]
B_2_0_1_2_barplot<-ggplot(data=B_2_barplot_data, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("Replicate 2")
B_3_0_1_2_barplot<-ggplot(data=B_3_barplot_data, aes(x=value)) + geom_bar() + xlab("Number of Isoforms Expressed") + ggtitle("Replicate 3")
##############################################################
#MAKE FIGURE 5B
exprs_percent_data<-read.table("../data/Figure_5_percent_exprs.txt")
colnames(exprs_percent_data)[2]<-"expression"
colnames(exprs_percent_data)[3]<-"percentage"
B_exprs_percent_data<-exprs_percent_data[exprs_percent_data$ID=="B_1",]
ES_exprs_percent_data<-exprs_percent_data[exprs_percent_data$ID=="ES",]
B_2_percent_hist<-ggplot(data=B_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_3_percent_hist<-ggplot(data=ES_exprs_percent_data, aes(x=percentage)) + geom_histogram() + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
#################################################################
#MAKE FIGURE 5C
B_2_exprs_percent_plot<-ggplot(data =B_exprs_percent_data, aes(y=expression,x=percentage)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
B_3_exprs_percent_plot<-ggplot(data = ES_exprs_percent_data, aes(y=expression,x=percentage)) + geom_point() + ylab("log2(Counts + 1)") + xlab("% Cells Which Express Both Isoforms") + ggtitle(" ")
ggarrange(B_2_0_1_2_barplot, B_3_0_1_2_barplot, B_2_percent_hist, B_3_percent_hist, B_2_exprs_percent_plot, B_3_exprs_percent_plot, ncol =2, nrow=3, labels=c("A", "", "B", "", "C"))
ggsave("../pdfs/SupplementaryFigure16.pdf", plot=last_plot(), height= 225, width=170, units=c("mm"))
ggsave("../pngs/SupplementaryFigure16.png", plot=last_plot(), height= 225, width=170, units=c("mm"))
rm(list=ls())
library(ggplot2)
library(ggpubr)
#read in data
ground_truth_expr<-read.table(gzfile("../data/SupplementaryFigure15.gz"))
#plot data and save
graph<-ggplot(data=ground_truth_expr, aes(x=estimates)) + geom_histogram(binwidth = 10)  +coord_cartesian(ylim=c(0, 100000), xlim=c(0,1500)) + xlab("100 x log2(Ground Truth Expression in TPM + 1)") + ylab("Frequency of Isoforms")
graph
ggsave("../pdfs/SupplementaryFigure12.pdf", plot=last_plot())
ggsave("../pngs/SupplementaryFigure12.png", plot=last_plot())
ggsave("../pdfs/SupplementaryFigure15.pdf", plot=last_plot())
ggsave("../pngs/SupplementaryFigure15.png", plot=last_plot())
rm(list=ls())
library(ggplot2)
library(ggpubr)
#read in data
ground_truth_expr<-read.table(gzfile("../data/SupplementaryFigure12.gz"))
#plot data and save
ggplot(data=ground_truth_expr, aes(x=estimates)) + geom_histogram(binwidth = 10)  + ylim(0, 100000) + xlab("100 x log2(Ground Truth Expression in TPM + 1)") + ylab("Frequency of Isoforms")
ggsave("../pdfs/SupplementaryFigure12.pdf", plot=last_plot())
ggsave("../pngs/SupplementaryFigure12.png", plot=last_plot())

p <- ggplot(means, aes(x=total_no_cells, y=get(column_name), group=read_number, colour=factor(read_number))) +  stat_summary(fun.y="mean", geom="line") + stat_summary(fun.data = mean_se, geom="errorbar") + scale_colour_manual(values=cbbPalette, name="Number of Reads")
p <- p + xlab("Number of Cells Simulated") + ylab(y_axis_label) + ggtitle(title_text) + theme(text=element_text(size = 14), legend.position='none', axis.text.x=element_text( angle=30,vjust=.8, hjust=0.8)))
return(p)
}
plot_against_read_number<-function(data_name, column_name, y_axis_label, x_axis_label, title_text){
#find means
means<-aggregate(as.formula(paste( column_name, "read_number + simulation_number + total_no_cells", sep= "~")), data=data_name, FUN="mean")
#plot graph
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
p <- ggplot(means, aes(x=read_number, y=get(column_name), group=total_no_cells, colour=factor(total_no_cells))) +  stat_summary(fun.y="mean", geom="line") + stat_summary(fun.data = mean_se, geom="errorbar") + scale_colour_manual(values=cbbPalette, name="Number of Cells")
p <- p + xlab(x_axis_label) + ylab(y_axis_label) + ggtitle(title_text) + theme(text=element_text(size = 14), legend.position = 'none',axis.text.x=element_text( angle=30,vjust=.8, hjust=0.8))
return(p)
}
#Function that returns legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
make_legend<-function(data_name, column_name, y_axis_label, title_text){
#find means
means<-aggregate(as.formula(paste( column_name, "read_number + simulation_number + total_no_cells", sep= "~")), data=data_name, FUN="mean")
#plot graph
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
p <- ggplot(means, aes(x=read_number, y=get(column_name), group=total_no_cells, colour=factor(total_no_cells))) +  stat_summary(fun.y="mean", geom="line") + stat_summary(fun.data = mean_se, geom="errorbar") + scale_colour_manual(values=cbbPalette, name="Number of Cells")
p <- p + xlab("Number of Reads") + ylab(y_axis_label) + ggtitle(title_text) + theme(text=element_text(size = 14))
return(g_legend(p))
}
##############################################
#plot spearmans and NRMSE graphs
spearmans_graph<-plot_against_read_number(prelim_50,"spearmans", "Spearman's Rho", "Number of Reads", "Spearman's Rho")
nrmse_graph<-plot_against_read_number(prelim_50,"NRMSE", "NRMSE", "Number of Reads","NRMSE")
leg<-make_legend(prelim_50,"NRMSE", "NRMSE", "Impact of Number of Cells and Number\nof Reads on the NRMSE")
#calculate precision and plot graph
prelim_50$precision<-prelim_50$TP/(prelim_50$TP+prelim_50$FP)
precision<-plot_against_read_number(prelim_50, "precision", "Precision", "","Precision")
#caculate recall and plot graph
prelim_50$recall<-prelim_50$TP/(prelim_50$TP+prelim_50$FN)
recall_graph<-plot_against_read_number(prelim_50,"recall", "Recall","", "Recall")
ggarrange(ggarrange(precision, recall_graph, leg, ncol=3, nrow=1, widths=c(2,2,2)), ggarrange(spearmans_graph, nrmse_graph, ncol=3, nrow=1, widths=c(2,2,2)),  ncol=1, nrow =2)
ggsave("Pictures/First_year_report/Figure5.pdf", plot = last_plot())
ggarrange(isoforms_detected, isoforms_expressed, isoforms_leg, ncol=3, nrow=1)
ggsave("Pictures/First_year_report/Figure6.pdf", plot=last_plot())
TP<-plot_against_read_number(prelim_50, "TP", "True Positives", "True Positives")
FP<-plot_against_read_number(prelim_50, "FP", "False Positives", "False Positives")
TP<-plot_against_read_number(prelim_50, "TP", "True Positives","", "True Positives")
FP<-plot_against_read_number(prelim_50, "FP", "False Positives","Number of Reads", "False Positives")
ggarrange(precision,TP,FP, nrow=3)
ggarrange(precision,leg,TP,NULL,FP, ncol=2, nrow=3)
ggarrange(precision,leg,TP,NULL,FP, ncol=2, nrow=3, widths = c(2,1))
ggarrange(precision,NULL,TP,leg,FP, ncol=2, nrow=3, widths = c(2,1))
ggarrange(precision,NULL,TP,leg,FP, ncol=2, nrow=3, widths = c(3,1))
rm(list=ls())
library(ggplot2)
library(ggpubr)
options(scipen = 999)
#############
#isoforms expressed + detected graphs
#make a list of filenames
#note first col = TP, 2nd=FN, 3rd=FP, 4th=TN
#confusion_matrices<-list.files( path = "data/coverage_study_results/multiple_cell_number/tmp_dropouts/", pattern = "*.txt")
#rows<-list()
#collect statistics of interest from files
#for (i in 1:260){
#  matrix<-confusion_matrices[i]
#  num_cells<-as.numeric(strsplit(matrix, "_")[[1]][2])
#  read_number<-as.numeric(strsplit(matrix, "_")[[1]][3])
#  simulation_number<-as.numeric(strsplit(matrix, "_")[[1]][4])
# matrix<-read.table(paste("data/coverage_study_results/multiple_cell_number/tmp_dropouts/", matrix, sep=""), header=F, sep=",", row.names = 1)
#  total_num_expressed_genes<-as.numeric(sum( matrix[,1] + matrix[,2] != 0))
#  total_num_detected_genes<-as.numeric(sum( matrix[,1] + matrix[,3] != 0 ))
#  total_num_zeros<-as.numeric(sum(matrix[,3]) + sum(matrix[,4]))
#  true_positives<-as.numeric(sum(matrix[,1]))
#  num_isoforms_with_over_80_percent_zeros<-as.numeric(sum(matrix[,1] + matrix[,2] < (strtoi(num_cells)/5) & matrix[,1] + matrix[,2] != 0))
#  precision<-as.numeric(sum(matrix[,1])/(sum(matrix[,1]) + sum(matrix[,3])))
#recall<-as.numeric(sum(matrix[,1])/(sum(matrix[,1])+sum(matrix[,2])))
# dat<-data.frame(num_cells,read_number,simulation_number,total_num_expressed_genes, total_num_zeros, true_positives, total_num_detected_genes, num_isoforms_with_over_80_percent_zeros, precision,recall)
#  rows[[i]]<-dat
#}
#put statistics into dataframe
#results_dataframe = do.call(rbind, rows)
#results_dataframe<-results_dataframe[results_dataframe$read_number!=16000000,]
#write.table(results_dataframe, "data/coverage_study_results/results_dataframe.txt")
results_dataframe<-read.table("data/coverage_study_results/results_dataframe.txt")
#function to plot graphs
plot_coverage_graphs<-function(data_name, column_name, y_axis_label, title_text){
#plot graph
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
p <- ggplot(data_name, aes(x=num_cells, y=get(column_name), group=read_number, colour=factor(read_number))) +  stat_summary(fun.y="mean", geom="line") + stat_summary(fun.data = mean_se, geom="errorbar") + scale_colour_manual(values=cbbPalette, name="Number of Reads")
p <- p + xlab("Number of Cells") + ylab(y_axis_label) + ggtitle(title_text) + theme(text=element_text(size = 14),axis.text.x=element_text( angle=30,vjust=.8, hjust=0.8),  legend.position = 'none')
return(p)
}
#Function that returns legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
make_legend<-function(data_name, column_name, y_axis_label, title_text){
#plot graph
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
p <- ggplot(data_name, aes(x=num_cells, y=get(column_name), group=read_number, colour=factor(read_number))) +  stat_summary(fun.y="mean", geom="line") + stat_summary(fun.data = mean_se, geom="errorbar") + scale_colour_manual(values=cbbPalette, name="Number of Reads")
p <- p + xlab("Number of Cells") + ylab(y_axis_label) + ggtitle(title_text) + theme(text=element_text(size = 14))
return(g_legend(p))
}
#plot total number of isoforms expressed across all cells
isoforms_expressed<-plot_coverage_graphs(results_dataframe, "total_num_expressed_genes", "Isoforms Expressed", "Isoforms Expressed")
#plot total number of isoforms detected across all cells
isoforms_detected<-plot_coverage_graphs(results_dataframe, "total_num_detected_genes", "Isoforms Detected", "Isoforms Detected")
isoforms_leg<-make_legend(results_dataframe, "total_num_detected_genes", "Total Number of Isoforms Detected", "Total Number of Isoforms Detected\nAcross All Cells")
rm(list=setdiff(ls(), c("isoforms_expressed", "isoforms_detected", "isoforms_leg")))
##################
#read in and format data
prelim_50<-read.table("data/coverage_study_results/multiple_cell_number/clean_coverage_statistics.txt")
prelim_50<-prelim_50[,!(names(prelim_50) %in% c("V1"))]
colnames(prelim_50)<-c("total_no_cells","read_number", "simulation_number","cell_of_total","spearmans","NRMSE","MSE", "MSE_log", "TP","FP","TN","FN", "TPR_score", "min_FPR", "max_FPR", "median_FPR")
prelim_50<-as.data.frame.matrix(prelim_50)
prelim_50<-prelim_50[prelim_50$read_number!=16000000,]
################################################
# FUNCTIONS
#function to plot graphs
plot_coverage_graphs<-function(data_name, column_name, y_axis_label, title_text){
#find means
means<-aggregate(as.formula(paste( column_name, "read_number + simulation_number + total_no_cells", sep= "~")), data=data_name, FUN="mean")
#plot graph
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
p <- ggplot(means, aes(x=total_no_cells, y=get(column_name), group=read_number, colour=factor(read_number))) +  stat_summary(fun.y="mean", geom="line") + stat_summary(fun.data = mean_se, geom="errorbar") + scale_colour_manual(values=cbbPalette, name="Number of Reads")
p <- p + xlab("Number of Cells Simulated") + ylab(y_axis_label) + ggtitle(title_text) + theme(text=element_text(size = 14), legend.position='none', axis.text.x=element_text( angle=30,vjust=.8, hjust=0.8)))
return(p)
}
plot_against_read_number<-function(data_name, column_name, y_axis_label, x_axis_label, title_text){
#find means
means<-aggregate(as.formula(paste( column_name, "read_number + simulation_number + total_no_cells", sep= "~")), data=data_name, FUN="mean")
#plot graph
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
p <- ggplot(means, aes(x=read_number, y=get(column_name), group=total_no_cells, colour=factor(total_no_cells))) +  stat_summary(fun.y="mean", geom="line") + stat_summary(fun.data = mean_se, geom="errorbar") + scale_colour_manual(values=cbbPalette, name="Number of Cells")
p <- p + xlab(x_axis_label) + ylab(y_axis_label) + ggtitle(title_text) + theme(text=element_text(size = 14), legend.position = 'none',axis.text.x=element_text( angle=30,vjust=.8, hjust=0.8))
return(p)
}
#Function that returns legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
make_legend<-function(data_name, column_name, y_axis_label, title_text){
#find means
means<-aggregate(as.formula(paste( column_name, "read_number + simulation_number + total_no_cells", sep= "~")), data=data_name, FUN="mean")
#plot graph
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
p <- ggplot(means, aes(x=read_number, y=get(column_name), group=total_no_cells, colour=factor(total_no_cells))) +  stat_summary(fun.y="mean", geom="line") + stat_summary(fun.data = mean_se, geom="errorbar") + scale_colour_manual(values=cbbPalette, name="Number of Cells")
p <- p + xlab("Number of Reads") + ylab(y_axis_label) + ggtitle(title_text) + theme(text=element_text(size = 14))
return(g_legend(p))
}
##############################################
#plot spearmans and NRMSE graphs
spearmans_graph<-plot_against_read_number(prelim_50,"spearmans", "Spearman's Rho", "Number of Reads", "Spearman's Rho")
nrmse_graph<-plot_against_read_number(prelim_50,"NRMSE", "NRMSE", "Number of Reads","NRMSE")
leg<-make_legend(prelim_50,"NRMSE", "NRMSE", "Impact of Number of Cells and Number\nof Reads on the NRMSE")
#calculate precision and plot graph
prelim_50$precision<-prelim_50$TP/(prelim_50$TP+prelim_50$FP)
precision<-plot_against_read_number(prelim_50, "precision", "Precision", "","Precision")
#caculate recall and plot graph
prelim_50$recall<-prelim_50$TP/(prelim_50$TP+prelim_50$FN)
recall_graph<-plot_against_read_number(prelim_50,"recall", "Recall","", "Recall")
TP<-plot_against_read_number(prelim_50, "TP", "True Positives","", "True Positives")
FP<-plot_against_read_number(prelim_50, "FP", "False Positives","Number of Reads", "False Positives")
ggarrange(ggarrange(precision, recall_graph, leg, ncol=3, nrow=1, widths=c(2,2,2)), ggarrange(spearmans_graph, nrmse_graph, ncol=3, nrow=1, widths=c(2,2,2)),  ncol=1, nrow =2)
ggsave("Pictures/First_year_report/Figure5.pdf", plot = last_plot())
ggarrange(isoforms_detected, isoforms_expressed, isoforms_leg, ncol=3, nrow=1)
ggsave("Pictures/First_year_report/Figure6.pdf", plot=last_plot())
ggarrange(precision,NULL,TP,leg,FP, ncol=2, nrow=3, widths = c(3,1))
ggsave("Pictures/First_year_report/Figure7.pdf", plot=last_plot())
setwd("Benchmarking_paper/processed_files/scripts/")
#QC script
library(ggplot2)
library(ggpubr)
library(scater, quietly = TRUE)
library(knitr)
options(stringsAsFactors = FALSE)
############################################################
# READS AND ALIGNMENT QC PLOTS
QC_raw<-read.table("../data/SupplementaryFigure1_reads_alignment_data.txt")
mean(QC_raw$NumReads)
QC_raw<-read.table("../data/SupplementaryFigure2_reads_alignment_data.txt")
mean(QC_raw$NumReads)
#READ IN BULK DATA
bulk<-read.table("../data/Figure_bulk.txt")
downsampled<-read.table("../data/Figure_bulk_downsampled.txt")
bulk<-cbind(bulk, Experiment="bulk")
downsampled<-cbind(downsampled, Experiment="bulk_downsampled")
bulk<-rbind(bulk, downsampled)
head(bulk)
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(reshape2)
#######################################################################
# FUNCTIONS
#function removes trailing strings from tool names
remove_trail<-function(ggplot_results){
ggplot_results$Tool<-sub("_cor", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_F1", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_nmrse", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_precision", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_recall", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_align", "Salmon\nAlign", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_quasi", "Salmon\nQuasi", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_SMEM", "Salmon\nSMEM", ggplot_results$Tool)
return(ggplot_results)
}
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#function to create ggplot object
make_ggplot<-function(df, title, ylabel){
p<-ggplot(data=df, aes(x=Tool, y=Value, colour=Experiment)) + geom_point( position=position_jitter(width = .2), stat = "identity") + facet_grid(~Tool, scales= "free_x",space = "free_x")
p<-p + theme(legend.position = 'none', axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(), text = element_text(size=14), strip.text.x = element_text(size=14))
p<-p + ggtitle(title) + ylab(ylabel) + scale_colour_manual(values=cbbPalette)
return(p)
}
#################################
#TO DO
#READ IN BULK DATA
bulk<-read.table("../data/Figure_bulk.txt")
downsampled<-read.table("../data/Figure_bulk_downsampled.txt")
bulk<-cbind(bulk, Experiment="bulk")
downsampled<-cbind(downsampled, Experiment="bulk_downsampled")
bulk<-rbind(bulk, downsampled)
#split into ES and Blueprint
B_bulk<-bulk[bulk$Sample_name!="ERR522956",]
#delete Sample_name column and create an Experiment column
B_bulk<-cbind(B_bulk[,1:2], Value=B_bulk[,4], Experiment=B_bulk[,5])
#Read in Blueprint
B_single<-read.table("../data/Figure1.txt")
#Only keep RSEM Blueprint simulations
B_single<-B_single[B_single$Simulation=="RSEMsim",]
#Delete Simulation column and create an Experiment column
B_single<-cbind(B_single[,2:4], Experiment="single")
#Fuse bulk and single cell dfs
B_df<-rbind(B_bulk, B_single)
#Remove trailing strings after tool names
B_df<-remove_trail(B_df)
#Figuren style Blueprint plots
B_spear<-B_df[B_df$Statistic=="spearmans",]
B_nrmse<-B_df[B_df$Statistic=="nrmse",]
B_precision<-B_df[B_df$Statistic=="precision",]
B_recall<-B_df[B_df$Statistic=="recall",]
B_F1<-B_df[B_df$Statistic=="F1",]
spearmans<-make_ggplot(B_spear, "Spearman's Rho", "Spearman's Rho")
nrmse<-make_ggplot(B_nrmse, "NRMSE", "NRMSE")
precision<-make_ggplot(B_precision, "Precision", "Precision")
recall<-make_ggplot(B_recall, "Recall", "Recall")
F1<-make_ggplot(B_F1, "F1", "F1")
ggarrange(F1, ggarrange(precision, recall, nrow=2), spearmans,nrmse,
nrow = 2,
ncol = 2,
labels = c("A","","B", "C")
)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(reshape2)
#######################################################################
# FUNCTIONS
#function removes trailing strings from tool names
remove_trail<-function(ggplot_results){
ggplot_results$Tool<-sub("_cor", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_F1", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_nmrse", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_precision", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_recall", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_align", "Salmon\nAlign", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_quasi", "Salmon\nQuasi", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_SMEM", "Salmon\nSMEM", ggplot_results$Tool)
return(ggplot_results)
}
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#function to create ggplot object
make_ggplot<-function(df, title, ylabel){
p<-ggplot(data=df, aes(x=Tool, y=Value, colour=Experiment)) + geom_point( position=position_jitter(width = .2), stat = "identity") + facet_grid(~Tool, scales= "free_x",space = "free_x")
p<-p + theme(legend.position = 'none', axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(), text = element_text(size=14), strip.text.x = element_text(size=14))
p<-p + ggtitle(title) + ylab(ylabel) + scale_colour_manual(values=cbbPalette)
return(p)
}
#Function that returns legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
#################################
#TO DO
#READ IN BULK DATA
bulk<-read.table("../data/Figure_bulk.txt")
downsampled<-read.table("../data/Figure_bulk_downsampled.txt")
bulk<-cbind(bulk, Experiment="bulk")
downsampled<-cbind(downsampled, Experiment="bulk_downsampled")
bulk<-rbind(bulk, downsampled)
#split into ES and Blueprint
B_bulk<-bulk[bulk$Sample_name!="ERR522956",]
#delete Sample_name column and create an Experiment column
B_bulk<-cbind(B_bulk[,1:2], Value=B_bulk[,4], Experiment=B_bulk[,5])
#Read in Blueprint
B_single<-read.table("../data/Figure1.txt")
#Only keep RSEM Blueprint simulations
B_single<-B_single[B_single$Simulation=="RSEMsim",]
#Delete Simulation column and create an Experiment column
B_single<-cbind(B_single[,2:4], Experiment="single")
#Fuse bulk and single cell dfs
B_df<-rbind(B_bulk, B_single)
#Remove trailing strings after tool names
B_df<-remove_trail(B_df)
#Figuren style Blueprint plots
B_spear<-B_df[B_df$Statistic=="spearmans",]
B_nrmse<-B_df[B_df$Statistic=="nrmse",]
B_precision<-B_df[B_df$Statistic=="precision",]
B_recall<-B_df[B_df$Statistic=="recall",]
B_F1<-B_df[B_df$Statistic=="F1",]
spearmans<-make_ggplot(B_spear, "Spearman's Rho", "Spearman's Rho")
nrmse<-make_ggplot(B_nrmse, "NRMSE", "NRMSE")
precision<-make_ggplot(B_precision, "Precision", "Precision")
recall<-make_ggplot(B_recall, "Recall", "Recall")
F1<-make_ggplot(B_F1, "F1", "F1")
leg=g_legend(ggplot(data=B_spear, aes(x=Tool, y=Value, colour=Experiment)) + geom_point( position=position_jitter(width = .2), stat = "identity"))
ggarrange(F1, ggarrange(precision, recall, nrow=2), leg, spearmans,nrmse,
nrow = 2,
ncol = 3,
widths=c(2,2,1)
labels = c("A","","B", "C")
)
ggsave("../pdfs/Figure_B_bulk.pdf", plot = last_plot(), width=170 *2, units=c("mm") )
ggsave("../pngs/Figure_B_bulk.png", plot = last_plot(), width=170 *2, units=c("mm") )
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(reshape2)
#######################################################################
# FUNCTIONS
#function removes trailing strings from tool names
remove_trail<-function(ggplot_results){
ggplot_results$Tool<-sub("_cor", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_F1", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_nmrse", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_precision", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_recall", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_align", "Salmon\nAlign", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_quasi", "Salmon\nQuasi", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_SMEM", "Salmon\nSMEM", ggplot_results$Tool)
return(ggplot_results)
}
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#function to create ggplot object
make_ggplot<-function(df, title, ylabel){
p<-ggplot(data=df, aes(x=Tool, y=Value, colour=Experiment)) + geom_point( position=position_jitter(width = .2), stat = "identity") + facet_grid(~Tool, scales= "free_x",space = "free_x")
p<-p + theme(legend.position = 'none', axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(), text = element_text(size=14), strip.text.x = element_text(size=14))
p<-p + ggtitle(title) + ylab(ylabel) + scale_colour_manual(values=cbbPalette)
return(p)
}
#Function that returns legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
#################################
#TO DO
#READ IN BULK DATA
bulk<-read.table("../data/Figure_bulk.txt")
downsampled<-read.table("../data/Figure_bulk_downsampled.txt")
bulk<-cbind(bulk, Experiment="bulk")
downsampled<-cbind(downsampled, Experiment="bulk_downsampled")
bulk<-rbind(bulk, downsampled)
#split into ES and Blueprint
B_bulk<-bulk[bulk$Sample_name!="ERR522956",]
#delete Sample_name column and create an Experiment column
B_bulk<-cbind(B_bulk[,1:2], Value=B_bulk[,4], Experiment=B_bulk[,5])
#Read in Blueprint
B_single<-read.table("../data/Figure1.txt")
#Only keep RSEM Blueprint simulations
B_single<-B_single[B_single$Simulation=="RSEMsim",]
#Delete Simulation column and create an Experiment column
B_single<-cbind(B_single[,2:4], Experiment="single")
#Fuse bulk and single cell dfs
B_df<-rbind(B_bulk, B_single)
#Remove trailing strings after tool names
B_df<-remove_trail(B_df)
#Figuren style Blueprint plots
B_spear<-B_df[B_df$Statistic=="spearmans",]
B_nrmse<-B_df[B_df$Statistic=="nrmse",]
B_precision<-B_df[B_df$Statistic=="precision",]
B_recall<-B_df[B_df$Statistic=="recall",]
B_F1<-B_df[B_df$Statistic=="F1",]
spearmans<-make_ggplot(B_spear, "Spearman's Rho", "Spearman's Rho")
nrmse<-make_ggplot(B_nrmse, "NRMSE", "NRMSE")
precision<-make_ggplot(B_precision, "Precision", "Precision")
recall<-make_ggplot(B_recall, "Recall", "Recall")
F1<-make_ggplot(B_F1, "F1", "F1")
leg=g_legend(ggplot(data=B_spear, aes(x=Tool, y=Value, colour=Experiment)) + geom_point( position=position_jitter(width = .2), stat = "identity"))
ggarrange(F1, ggarrange(precision, recall, nrow=2), leg, spearmans,nrmse,
nrow = 2,
ncol = 3,
widths=c(2,2,1),
labels = c("A","","B", "C")
)
ggarrange(F1, ggarrange(precision, recall, nrow=2), leg, spearmans,nrmse,
nrow = 2,
ncol = 3,
labels = c("A","","","B", "C")
)
leg=g_legend(ggplot(data=B_spear, aes(x=Tool, y=Value, colour=Experiment)) + geom_point( position=position_jitter(width = .2), stat = "identity")+ scale_colour_manual(values=cbbPalette))
ggarrange(F1, ggarrange(precision, recall, nrow=2), leg, spearmans,nrmse,
nrow = 2,
ncol = 3,
labels = c("A","","","B", "C")
)
ggsave("../pdfs/Figure_B_bulk_downsampled.pdf", plot = last_plot(), width=170 *2, units=c("mm") )
ggsave("../pngs/Figure_B_bulk_downsampled.png", plot = last_plot(), width=170 *2, units=c("mm") )
ggarrange(F1, ggarrange(precision, recall, nrow=2), leg, spearmans,nrmse,
nrow = 2,
ncol = 3,
widths = c(2,2,1),
labels = c("A","","","B", "C")
)
rm(list=ls())
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(reshape2)
#######################################################################
# FUNCTIONS
#function removes trailing strings from tool names
remove_trail<-function(ggplot_results){
ggplot_results$Tool<-sub("_cor", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_F1", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_nmrse", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_precision", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("_recall", "", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_align", "Salmon\nAlign", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_quasi", "Salmon\nQuasi", ggplot_results$Tool)
ggplot_results$Tool<-sub("Salmon_SMEM", "Salmon\nSMEM", ggplot_results$Tool)
return(ggplot_results)
}
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#function to create ggplot object
make_ggplot<-function(df, title, ylabel){
p<-ggplot(data=df, aes(x=Tool, y=Value, colour=Experiment)) + geom_point( position=position_jitter(width = .2), stat = "identity") + facet_grid(~Tool, scales= "free_x",space = "free_x")
p<-p + theme(legend.position = 'none', axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(), text = element_text(size=14), strip.text.x = element_text(size=14))
p<-p + ggtitle(title) + ylab(ylabel) + scale_colour_manual(values=cbbPalette)
return(p)
}
#Function that returns legend
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
legend
}
#################################
#TO DO
#READ IN BULK DATA
bulk<-read.table("../data/Figure_bulk.txt")
downsampled<-read.table("../data/Figure_bulk_downsampled.txt")
bulk<-cbind(bulk, Experiment="bulk")
downsampled<-cbind(downsampled, Experiment="bulk_downsampled")
bulk<-rbind(bulk, downsampled)
#split into ES and Blueprint
B_bulk<-bulk[bulk$Sample_name!="ERR522956",]
#delete Sample_name column and create an Experiment column
B_bulk<-cbind(B_bulk[,1:2], Value=B_bulk[,4], Experiment=B_bulk[,5])
#Read in Blueprint
B_single<-read.table("../data/Figure1.txt")
#Only keep RSEM Blueprint simulations
B_single<-B_single[B_single$Simulation=="RSEMsim",]
#Delete Simulation column and create an Experiment column
B_single<-cbind(B_single[,2:4], Experiment="single")
#Fuse bulk and single cell dfs
B_df<-rbind(B_bulk, B_single)
#Remove trailing strings after tool names
B_df<-remove_trail(B_df)
#Figuren style Blueprint plots
B_spear<-B_df[B_df$Statistic=="spearmans",]
B_nrmse<-B_df[B_df$Statistic=="nrmse",]
B_precision<-B_df[B_df$Statistic=="precision",]
B_recall<-B_df[B_df$Statistic=="recall",]
B_F1<-B_df[B_df$Statistic=="F1",]
spearmans<-make_ggplot(B_spear, "Spearman's Rho", "Spearman's Rho")
nrmse<-make_ggplot(B_nrmse, "NRMSE", "NRMSE")
precision<-make_ggplot(B_precision, "Precision", "Precision")
recall<-make_ggplot(B_recall, "Recall", "Recall")
F1<-make_ggplot(B_F1, "F1", "F1")
leg=g_legend(ggplot(data=B_spear, aes(x=Tool, y=Value, colour=Experiment)) + geom_point( position=position_jitter(width = .2), stat = "identity")+ scale_colour_manual(values=cbbPalette))
ggarrange(F1, ggarrange(precision, recall, nrow=2), leg, spearmans,nrmse,
nrow = 2,
ncol = 3,
widths = c(2,2,1),
labels = c("A","","","B", "C")
)
ggsave("../pdfs/Figure_B_bulk_downsampled.pdf", plot = last_plot(), width=170 *2.5, units=c("mm") )
ggsave("../pngs/Figure_B_bulk_downsampled.png", plot = last_plot(), width=170 *2.5, units=c("mm") )
